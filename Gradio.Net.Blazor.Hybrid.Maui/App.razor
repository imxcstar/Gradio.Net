@using Gradio.Net.jinja2
@using Microsoft.JSInterop
@inject NavigationManager _navigation
@inject GradioApp _gradioApp
@inject IJSRuntime _js

<script type="module">
    (function () {
        'use strict';

        // 全局事件缓冲池
        const eventRegisters = window.__eventRegisters__ || (window.__eventRegisters__ = {});

        // 统一 SSE 事件推送接口
        function onSSEEventStream(data) {
            let { uuid, final, content } = data;
            if (!eventRegisters[uuid]) {
                eventRegisters[uuid] = { pending: [], finished: false };
            }
            if (!final && typeof content === 'string') {
                content = new TextEncoder().encode(content);
            } else if (final) {
                content = null;
            }
            eventRegisters[uuid].pending.push({ final, content });
        }

        // 兼容 window.onSSEEventStream
        Object.defineProperty(window, 'onSSEEventStream', {
            value: onSSEEventStream,
            configurable: true,
            writable: true,
            enumerable: false,
        });

        // fetch 拦截器，自动将 sse 响应转成自定义流
        (function (origFetch) {
            window.fetch = async function (...args) {
                let r = await origFetch.apply(this, args);
                let eventStreamId = r.headers.get('kapp-event-stream');
                if (eventStreamId) {
                    // 初始化缓冲
                    if (!eventRegisters[eventStreamId]) {
                        eventRegisters[eventStreamId] = { pending: [], finished: false };
                    }
                    // 替换 body 为自定义 ReadableStream
                    const stream = createKAppEventReadableStream(eventStreamId);
                    Object.defineProperty(r, 'body', {
                        configurable: true,
                        enumerable: true,
                        get() { return stream; }
                    });
                }
                return r;
            };
        })(window.fetch);

        // 自定义 ReadableStream，消费 eventRegisters 缓冲
        function createKAppEventReadableStream(eventStreamId) {
            return new ReadableStream({
                async pull(controller) {
                    // 等待数据到达
                    while (
                        !eventRegisters[eventStreamId] ||
                        !eventRegisters[eventStreamId].pending ||
                        eventRegisters[eventStreamId].pending.length === 0
                    ) {
                        // 若已结束则关闭
                        if (eventRegisters[eventStreamId] && eventRegisters[eventStreamId].finished) {
                            controller.close();
                            return;
                        }
                        await new Promise(r => setTimeout(r, 50));
                    }
                    // 取数据
                    const data = eventRegisters[eventStreamId].pending.shift();
                    if (data.final) {
                        eventRegisters[eventStreamId].finished = true;
                        controller.close();
                    } else {
                        controller.enqueue(data.content);
                    }
                },
                cancel() {
                    if (eventRegisters[eventStreamId]) {
                        eventRegisters[eventStreamId].finished = true;
                    }
                }
            });
        }

        // EventSource 兼容
        if (!window.__KAppCustomEventSource) {
            class CustomEventSource {
                constructor(url) {
                    this.url = url;
                    this.listeners = {};
                    this.eventQueue = [];
                    this.closed = false;
                    this.init();
                }

                async init() {
                    let data = await fetch(this.url);
                    let uuid = data.headers.get('kapp-event-stream');
                    this.uuid = uuid;
                    this.processEventQueue();
                }

                addEventListener(type, listener) {
                    if (!this.listeners[type]) this.listeners[type] = [];
                    this.listeners[type].push(listener);
                }

                dispatchEvent(event) {
                    if (this.listeners[event.type]) {
                        this.listeners[event.type].forEach(listener => listener(event));
                    }
                }

                processEventQueue() {
                    if (this.closed) return;
                    const uuid = this.uuid;
                    if (eventRegisters[uuid] && eventRegisters[uuid].pending && eventRegisters[uuid].pending.length > 0) {
                        const { final, content } = eventRegisters[uuid].pending.shift();
                        const dcontent = content ? new TextDecoder().decode(content) : null;
                        const event = new MessageEvent('message', { data: dcontent });
                        if (this._onmessage && dcontent != null) this._onmessage(event);
                        this.dispatchEvent(event);
                        if (final) {
                            eventRegisters[uuid].finished = true;
                            this.closed = true;
                            return;
                        }
                    }
                    setTimeout(() => this.processEventQueue(), 30);
                }

                set onmessage(callback) { this._onmessage = callback; }
                get onmessage() { return this._onmessage; }
                close() { this.closed = true; }
            }
            window.EventSource = CustomEventSource;
            window.__KAppCustomEventSource = true;
        }

        // 监听所有 input[type="file"] 的相关事件
        window.allFileInputs = [];
        window.fileInputCount = 0;

        function interceptFileInputs(root = document) {
            root.querySelectorAll('input[type="file"]').forEach(function (input) {
                input.addEventListener('click', block, true);
                input.addEventListener('focus', block, true);
                input.addEventListener('mousedown', block, true);
            });
        }
        async function block(e) {
            e.stopImmediatePropagation();
            e.preventDefault();
            window.fileInputCount++;
            let s = window.fileInputCount.toString();
            window.allFileInputs[s] = e;
            const ret = await window.GradioDotNetReference.invokeMethodAsync(window.GradioSelectFile, s);
        }

        // 初始拦截
        interceptFileInputs();

        // 监听后续动态添加的 input[type="file"]
        const observer = new MutationObserver((mutations) => {
            mutations.forEach(m => {
                m.addedNodes.forEach(node => {
                    if (node.nodeType === 1) {
                        if (node.matches && node.matches('input[type="file"]')) {
                            interceptFileInputs(node.parentNode || document);
                        } else if (node.querySelectorAll) {
                            interceptFileInputs(node);
                        }
                    }
                });
            });
        });
        observer.observe(document.body, { childList: true, subtree: true });

        // 拦截 showOpenFilePicker
        if (window.showOpenFilePicker) {
            window.showOpenFilePicker = async function () {
                alert('showOpenFilePicker选择文件功能已被禁用！');
                //await window.GradioDotNetReference.invokeMethodAsync(window.GradioSelectFile, 'test');
                return Promise.reject(new Error('已禁用'));
            }
        }

    })();
</script>

@html

@code {
	public MarkupString html;

	protected override void OnInitialized()
	{
		Uri uri = new(_navigation.Uri);
		var indexInfo = _gradioApp.GetFileInfo("index.html");
		using Stream fileStream = indexInfo.CreateReadStream();

		Template template = new(new StreamReader(fileStream).ReadToEnd());
		html = new MarkupString(template.Render(new Dictionary<string, object>() { { "config", _gradioApp.GetConfig($"{uri.Scheme}://{uri.Host}") }, { "gradio_api_info", new { named_endpoints = new Dictionary<string, object>(), unnamed_endpoints = new Dictionary<string, object>() } } }));
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await _js.InvokeVoidAsync("RegisterGradioDotNetReference", DotNetObjectReference.Create(this));
			await _js.InvokeVoidAsync("RegisterGradioSelectFile", nameof(SelectFile));
			await _js.InvokeVoidAsync("RegisterGradioUploadFileData", nameof(UploadFileData));
		}
		await base.OnAfterRenderAsync(firstRender);
	}

	[JSInvokable]
	public async Task SelectFile(string elementId)
	{
		var fileResult = await FilePicker.Default.PickAsync();
		if (fileResult != null)
		{
			using var stream = await fileResult.OpenReadAsync();
			using var ms = new MemoryStream();
			await stream.CopyToAsync(ms);
			var bytes = ms.ToArray();
			var base64 = Convert.ToBase64String(bytes);

			await _js.InvokeVoidAsync("GradioSetSelectFile", elementId, fileResult.FileName, base64);
		}
	}

	[JSInvokable]
	public async Task<string> UploadFileData(string uploadId, string fileName, byte[] fileContent)
	{
		var ret = await _gradioApp.Upload(uploadId, [(new MemoryStream(fileContent), fileName)]);
		return System.Text.Json.JsonSerializer.Serialize(ret);
	}
}
